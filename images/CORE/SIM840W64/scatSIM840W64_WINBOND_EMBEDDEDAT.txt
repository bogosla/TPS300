;/*****************************************************************************
;*  Copyright Statement:
;*  --------------------
;*  This software is protected by Copyright and the information contained
;*  herein is confidential. The software may not be copied and the information
;*  contained herein may not be used or disclosed except with the written
;*  permission of MediaTek Inc. (C) 2007
;*
;*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
;*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
;*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
;*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
;*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
;*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
;*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
;*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
;*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
;*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
;*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
;*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
;*
;*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
;*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
;*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
;*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
;*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
;*
;*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
;*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
;*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
;*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
;*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
;*
;*****************************************************************************/
;
;/*****************************************************************************
; *
; * Filename:
; * ---------
; *   scatSIM800W64_WINBOND_EMBEDDEDAT.txt
; *
; * Project:
; * --------
; *   Maui_Software
; *
; * Description:
; * ------------
; *   defines the memory map for the validation board
; *
; * Author:
; * -------
; *   system auto generator v3.96 -> p3.87
; *
; * Auto Generated Date:
; * -------
; *   2012/7/6
; *
; * Revision History:
; * -------
; * $Log: scatSIM800W64_WINBOND_EMBEDDEDAT.txt system auto generator v3.96 -> p3.87 $
; * 
; ****************************************************************************/
;
;
;
;--------------------- 
;[MAUI_12345678] 
;--------------------- 
;
;=========================================================================
; This scatter file is auto-generated and please DO NOT change the content at will
;=========================================================================
;
;--------------------
; SCHEME   : external 2.8125MB flash memory and 4MB SRAM
; PLATFORM : MT6252
; FEATURES : ESBNOR 
;--------------------

ROM 0x08000000 0x003F8000
{
    ROM 0x08000000 0x00000800
    {
         bootarm.obj (C$$code,+First)
         *.obj (LEADING_PART)
    }
    ROM0 0x08000800 FIXED
    {
         *.obj (SECINFO)
    }
    ROMHEAD +0x0 
    {
         *.obj (SECOND_PART)
         *.obj (MAUI_FOTA_HEAD_INFO)
    }
    ROM1 +0x0 
    {
         .ANY (+RO-CODE)
         .ANY (+RO-DATA)
    }
    SINGLE_BANK_CODE 0x00000200
    {
;for single bank support , certain following code need to be called by sleep manager
         bootarm.obj (SNORCODE,+First)
         * (SNORCODE)
         * (SNORCONST)
    }
    EXTSRAM 0x00002000 
    {
         * (NONCACHEDRW, NONCACHEDZI)
         *deniro.lib (+RW, +ZI)
         *fs_fig.lib (+RW, +ZI)
    }
    DYNAMIC_CACHEABLE_EXTSRAM_DEFAULT_NONCACHEABLE_ZI +0x2000 
    {
         med_main.obj (LARGEPOOL_ZI)
         * (DYNAMICCACHEABLEZI_NC)
    }
    DYNAMIC_CACHEABLE_EXTSRAM_DEFAULT_NONCACHEABLE_RW +0x0 
    {
         * (DYNAMICCACHEABLERW_NC)
    }
    CACHED_EXTSRAM +0xF0002000
    {
; All RW/ZI are put in CACHED region by default
         * (+RW, +ZI)
         * (CACHED_EXTSRAM_RW, CACHED_EXTSRAM_ZI)
    }
    DYNAMIC_CACHEABLE_EXTSRAM_DEFAULT_CACHEABLE +0x2000 
    {
         * (DYNAMICCACHEABLERW_C, DYNAMICCACHEABLEZI_C)
    }
    CACHED_DUMMY_END 0xf03fc000 
    {
         bootarm.obj (DUMMY_POOL)
    }
; DSP execution regions cannot be OVERLAY; its size should be specified as 2^N, larger than 4KB, and should align with its start address
    EXTSRAM_DSP_TX 0x003fc000 0x2000
    {
         *.obj (EXTRAM_TXDATA)
    }
    EXTSRAM_DSP_RX 0x003fe000 0x2000
    {
         *.obj (EXTRAM_RXDATA)
    }
    ; define an empty section to detect unsafe APIs in link time
    SHOULDBE_EMPTYSECTION +0 0x0
    {
        armlibc_rt.obj (SHOULD_NOT_USED_FUNCTION)
        armlibc_rt_heap.obj (SHOULD_NOT_USED_FUNCTION)
        armlibc_rt_io.obj (SHOULD_NOT_USED_FUNCTION)
    }
    EMIINIT_CODE 0x40008000 OVERLAY
    {
        * (EMIINITCODE, EMIINITCONST, EMIINITZI, EMIINITRW)
    }
    INTSRAM_CODE 0x40008000 OVERLAY 0x2C00
    {
; Please do NOT remove any content below!
         * (INTSRAM_ROCODE)
         * (INTSRAM_ROCODE_*)
         switch8.o (+RO-CODE)
; system-realted CODE , Extra SMALL set
         bootarm.obj (INTERNCODE)
         SST_intrCtrl.obj (INTERNCODE, INTERNCONST)
         cache.obj (INTERNCODE)
; Nucleus-related CODE , Extra SMALL set
         tct.obj (INTERNCODE)
         tmt.obj (+RO)
         kal_nucleus_timer.obj (INTERNCODE)
; THREADX-related CODE , SMALL set
         ; UNDER CONSTRUCTION
         tx_thread_interrupt_disable.obj (+RO)
         tx_thread_interrupt_restore.obj (+RO)
         tx_thread_context_save.obj (+RO)
         tx_thread_context_restore.obj (+RO)
         tx_thread_irq_nesting_start.obj (+RO)
         tx_thread_irq_nesting_end.obj (+RO)
         tx_thread_system_return.obj (+RO)
         tx_thread_schedule.obj (+RO)
         tx_thread_resume.obj (+RO)
         tx_thread_system_resume.obj (+RO)
         tx_timer_interrupt.obj (+RO)
         tx_timer_thread_entry.obj (+RO)
         tx_block_allocate.obj (+RO)
         tx_block_release.obj (+RO)
         tx_event_flags_get.obj (+RO)
         tx_event_flags_set.obj (+RO)
         tx_mutex_get.obj (+RO)
         tx_mutex_put.obj (+RO)
         kal_threadx_tasks.obj (INTERNCODE)
         kal_threadx_buff_mgr.obj (INTERNCODE)
         kal_threadx_itc.obj (INTERNCODE)
         kal_threadx_timer.obj (INTERNCODE)
; common used C library
         memset.o (+RO)
         rt_memclr.o (+RO)
         callvia.o (+RO)
         _sprintf.o (+RO)
         rt_memcpy.o (+RO)
         lludiv10.o (+RO)
         rt_udiv.o (+RO)
         uread4.o (+RO)
         uwrite4.o (+RO)

; Please do NOT remove any content above!
    }
    INTSRAM_DATA 0x4000AC00 0x2000
    {
; Please do NOT remove any content below!
         * (INTSRAM_RODATA, INTSRAM_RW, INTSRAM_ZI)
         * (INTSRAM_RODATA_*, INTSRAM_RW_*, INTSRAM_ZI_*)
; system-realted data
         stack_init.obj (INTERNCONST, INTERNRW, INTERNZI)
         ctrl_buff_pool.obj (INTERNCONST, INTERNRW, INTERNZI)
         stack_ltlcom.obj (INTERNCONST, INTERNRW, INTERNZI)
; Nucleus-related data ; Small set
         tct.obj (+RW, +ZI)
         tcd.obj (INTERNCONST, INTERNRW, INTERNZI)
         tmd.obj (+RW, +ZI)
         evd.obj (+RW, +ZI)
         pmd.obj (+RW, +ZI)
         qud.obj (+RW, +ZI)
         smd.obj (+RW, +ZI)
; THREADX-related data ; Standard set
         tx_thread_initialize.obj (+RW, +ZI)
         tx_timer_initialize.obj (+RW, +ZI)

; Please do NOT remove any content above!
    }   
    INTSRAM_DATA_PREINIT +0x0 0x2000
    {
; Please do NOT remove any content below!
         uart.obj (INTSRAM_RODATA, INTSRAM_RW, INTSRAM_ZI)
         *system.lib (INTSRAM_RODATA, INTSRAM_RW, INTSRAM_ZI)
         *init.lib (INTSRAM_RODATA, INTSRAM_RW, INTSRAM_ZI)
; system-realted data
         bootarm.obj (STACK_POOL_INTSRAM)
; Please do NOT remove any content above!
    }   
    ScatterAssert((ImageLength(INTSRAM_DATA) + ImageLength(INTSRAM_DATA_PREINIT)) < 0x2000)
}

COREAPI 0x083F8000 0x00008000
{
    COREAPI 0x083F8000 0x00008000
    {
        eat_core_interface.o* (EAT_API)
    }
}
